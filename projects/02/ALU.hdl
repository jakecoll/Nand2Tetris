// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:

   //zx, use mux to set x to 0 when zx == 1
   Mux16(a=x, b=false, sel=zx, out=xzero);

   //nx, 
   // Not16 for not value of x, the mux xzero and xnot based on nx
   Not16(in=xzero, out=xnot);
   Mux16(a=xzero, b=xnot, sel=nx, out=xzero2);

   //zy, use mux to set y to 0 when zy == 1
   Mux16(a=y, b=false, sel=zy, out=yzero);

   //ny, Not16 for not value of y, then mux yzero and ynot base on ny
   Not16(in=yzero, out=ynot);
   Mux16(a=yzero, b=ynot, sel=ny, out=yzero2);

   //f, add16 for x + y when f=1; and16 x & y if f=0; mux16 to differentiate
   Add16(a=xzero2, b=yzero2, out=fis1);
   And16(a=xzero2, b=yzero2, out=fis0);
   Mux16(a=fis0, b=fis1, sel=f, out=fout);

   //no, not16 to get not value; mux to differentiate based on no
   Not16(in=fout, out=noout);
   Mux16(a=fout, b=noout, sel=no, out=out, out[0..7]=outpart1, out[8..15]=outpart2, out[15]=neg);

   //zr
   //check for a 1 in the output

   Or8Way(in=outpart1, out=or8wayoutp1);
   Or8Way(in=outpart2, out=or8wayoutp2);
   Or(a=or8wayoutp1, b=or8wayoutp2, out=anyones);
   Xor(a=anyones, b=true, out=zr);


   //ng, just check if the 16th bit is a 1
   And(a=neg, b=true, out=ng);



}